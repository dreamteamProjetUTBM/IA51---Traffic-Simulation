/** 
 * 
 */
package environments

import org.newdawn.slick.geom.Vector2f
import org.newdawn.slick.state.StateBasedGame
import org.newdawn.slick.GameContainer
import org.newdawn.slick.Input

/** 
 * @author jerem
 * 
 */
abstract class Clickable extends EnvironmentObject implements Updateable {

	var clickedEvent : EventEnvironmentObjectMouseClicked
	var isMouseHover : boolean;
	var isMouseHoverAndPressed : boolean;
	var isMousePressed : boolean;


	/**
	 * Avec ce constructeur on donne directement le EventEntityMouseClicked
	 * 
	 * @param _clickedEvent
	 *            Le EventEntityMouseClicked qui contient directement les
	 *            actions
	 * @param _position
	 *            La position de l'entit�
	 * @param _size
	 *            La taille de l'entit�
	 */
	new (_clickedEvent : EventEnvironmentObjectMouseClicked, _position : Vector2f, _size : Vector2f) {
		super(_position, _size, true, true);

		clickedEvent = _clickedEvent;
		isMouseHover = false;
		isMouseHoverAndPressed = false;
		isMousePressed = false;

		//updatable = true;
	}
	
/** 
 * Avec ce constructeur on est oblig� de d�finir le
 * EventEntityMouseClicked dans la classe qui h�rite
 * 
 * @param _position
 * La position de l'entit�
 * @param _size
 * La taille de l'entit�
 */
	new (_position : Vector2f, _size : Vector2f) {
		super(_position, _size, true, true);
		clickedEvent = null
		isMouseHover = false;
		isMouseHoverAndPressed = false;
		isMousePressed = false;

		//updatable = true;
	}

/** 
 * Avec ce constructeur vous devez tout initialiser dans la classe qui
 * h�rite sauf la position donn�e en param�tre
 * 
 * @param _position
 * La position de l'entit�
 */
	new(_position : Vector2f) {
		super(_position, true, true);

		clickedEvent = null
		isMouseHover = false;
		isMouseHoverAndPressed = false;
		isMousePressed = false;
	}

	def isMouseHover() : boolean {
		return isMouseHover
	}
	
	def isMouseHoverAndPressed() : boolean {
		return isMouseHoverAndPressed
	}
	
	def isMousePressed : boolean {
		return isMousePressed
	}
	
	def override update(gc : GameContainer, sbg : StateBasedGame, delta : int) {
		var input = gc.getInput();

		if (getRect().contains(input.getMouseX(), input.getMouseY())) {
			isMouseHover = true;

			if (input.isMouseButtonDown(Input.MOUSE_LEFT_BUTTON)) {
				isMouseHoverAndPressed = true;
				if (clickedEvent != null)
					clickedEvent.mouseClicked();
			} else {
				isMouseHoverAndPressed = false;
			}
		} else {
			isMouseHover = false;
			isMouseHoverAndPressed = false;
		}
	}
	
	def setClickedEvent(ev : EventEnvironmentObjectMouseClicked) {
		clickedEvent = ev
	}
	
}
