/** 
 * 
 */
package environments

import framework.environment.AbstractEnvironment
import framework.environment.AgentBody
import java.util.List
import framework.environment.Influence
import framework.environment.Percept
import java.util.Collection
import framework.environment.MotionInfluence
import framework.time.TimeManager
import framework.environment.SituatedObject
import java.util.ArrayList
import org.arakhne.afc.gis.road.primitive.RoadNetwork
import org.arakhne.afc.gis.road.layer.RoadNetworkLayer
import logic.Map
import framework.time.StepTimeManager
import framework.math.Point2f
import framework.math.Shape2f
import org.arakhne.afc.math.geometry.d2.Shape2D
import org.arakhne.afc.math.geometry.d2.d.Shape2d
import framework.environment.Body
import ui.ApplicationMap
import java.util.HashMap
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.gis.road.primitive.RoadSegment
import org.arakhne.afc.gis.road.primitive.RoadConnection

/** 
 * @author jerem
 * 
 */
class CityEnvironment extends AbstractEnvironment{
	
	var environmentObjects : ArrayList<EnvironmentObject>

	/** Contains all data to draw Road Segments using JavaFX */
	var roadNetwork : RoadNetwork;
	var network : RoadNetworkLayer; // MapElementLayer<?>
	
	/** Contains all data about road segments */
	var roadSegmentDataCollection : RoadSegmentDataCollection;

	//var connectionsOccurence = new HashMap<Point2d, Integer>();
	var connectionsOccurence = new HashMap<RoadConnection, Integer>();
	
	var entryExitConnections = new ArrayList<RoadConnection>(); 
	
	new(){
		super(Map.WIDTH, Map.HEIGHT, new StepTimeManager(500))
		roadSegmentDataCollection = new RoadSegmentDataCollection()
		environmentObjects = new ArrayList<EnvironmentObject>

		network = ApplicationMap.instance.roadNetworkLayer as RoadNetworkLayer
		roadNetwork = network.roadNetwork;
		// Get all road segments and iterate on them to find
		// the road connections which are used multiple times
		for (seg : network.roadNetwork.roadSegments) {

				/** Create new RoadSegmentData for the current road segment
				 */
			var roadSegmentData : RoadSegmentData = new RoadSegmentData(seg);
			/*var pts = seg.points;
			for (pt : pts) {
				if (connectionsOccurence.containsKey(pt)) {
					connectionsOccurence.replace(pt, (connectionsOccurence.get(pt) + 1) as Integer);
				} else {
					connectionsOccurence.put(pt, new Integer(1));
				}
			}*/
			if (connectionsOccurence.containsKey(seg.beginPoint)) {
				connectionsOccurence.replace(seg.beginPoint, (connectionsOccurence.get(seg.beginPoint) + 1) as Integer);
			} else {
				connectionsOccurence.put(seg.beginPoint, new Integer(1));
			}

			if (connectionsOccurence.containsKey(seg.endPoint)) {
				connectionsOccurence.replace(seg.endPoint, (connectionsOccurence.get(seg.endPoint) + 1) as Integer);
			} else {
				connectionsOccurence.put(seg.endPoint, new Integer(1));
			}

			/** Add the segment data to the collection
			 */
			roadSegmentDataCollection.add(roadSegmentData);
		}

		var stop : StopSign
		var trafficLight : TrafficLight

		// For each connections, depending on the number, it creates
		// a stop sign or a traffic light on the map
		for (key : connectionsOccurence.keySet) {
			var cpt = connectionsOccurence.get(key);

			// The road connection is an entry/exit connection
			if (cpt == 1){
				entryExitConnections.add(key);
			}
			//If cpt == 3 => stop sign
			else if (cpt == 3) {
				stop = new StopSign(new Point2f(key.point.x, key.point.y));
				addEnvironmentObject(stop);

				/** Get all road segments data that are in this connection
				 */
				var segments = roadSegmentDataCollection.findRoadSegmentsForConnection(key);
				for (segment : segments) {
					if (segment.beginPoint === key) {
						segment.objectAtStart = stop;
					} else if (segment.endPoint === key) {
						segment.objectAtEnd = stop;
					}
				}
			} 
			// cpt > 3 => traffic light
			else if (cpt > 3) {	
				trafficLight = new TrafficLight(new Point2f(new Point2f(key.point.x, key.point.y)));
				trafficLight.changeColor(TrafficLightColor.GREEN);
				addEnvironmentObject(trafficLight);

				/** Get all road segments data that are in this connection
				 */
				var segments = roadSegmentDataCollection.findRoadSegmentsForConnection(key);
				for (segment : segments) {
					if (segment.beginPoint === key) {
						segment.objectAtStart = trafficLight;
					} else if (segment.endPoint === key) {
						segment.objectAtEnd = trafficLight;
					}
				}
			}
		}
	}

	def getNetwork() : RoadNetworkLayer {
		return network
	}

	def setNetwork(network : RoadNetworkLayer){
		this.network=network
	}
	
	def getRoadSegmentDataCollection() : RoadSegmentDataCollection{
		return roadSegmentDataCollection
	}
	
	def setRoadSegmentDataCollection(roadSegmentDataCollection : RoadSegmentDataCollection){
		this.roadSegmentDataCollection = roadSegmentDataCollection
	}
	
	def getEnvironmentObjects() : ArrayList<EnvironmentObject>{
		return environmentObjects
	}
	
	def addEnvironmentObject(object : EnvironmentObject) {
		environmentObjects.add(object)
	}
	
	def getRoadNetwork() : RoadNetwork{
		return roadNetwork
	}
	
	def getEntryExitConnections : ArrayList<RoadConnection>{
		return entryExitConnections;
	}
	
	def createAgentBody() {
		var random = (Math.random()* entryExitConnections.size) as int
		var car = new Car(new Point2f(
			entryExitConnections.get(random).point.x,
			entryExitConnections.get(random).point.y
		), 0, 0, 0, 0)
		addAgentBody(car,car.position,car.angle)
	}

	
	protected def onAgentBodyCreated(body : AgentBody) {
		
		//throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	protected def onAgentBodyDestroyed(body : AgentBody) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	protected def computeEndogenousBehaviorInfluences : List<Influence> {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	protected def computePerceptionsFor(^agent : AgentBody) : List<Percept> {		
		var u = new ArrayList<Percept>
		for(o : environmentObjects){
			if((o as TrafficLight).element.intersects(((^agent as Vehicle).rectangle) as Shape2d<?>)){
				//u.add(new Percept(o as ObjectBody)); 
			}
							  
		} 
		return u;
	}
	
	protected def applyInfluences(motionInfluences : Collection<MotionInfluence>, otherInfluences : Collection<Influence>, timeManager : TimeManager) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	def getAllObjects : Iterable<? extends SituatedObject> {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
}
