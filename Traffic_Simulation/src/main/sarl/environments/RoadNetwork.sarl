/** 
 * 
 */
package environments

import java.util.ArrayList
import org.arakhne.afc.gis.road.StandardRoadNetwork
import org.arakhne.afc.gis.maplayer.MapElementLayer
import java.io.File
import org.arakhne.afc.gis.mapelement.MapElement
import org.arakhne.afc.io.dbase.DBaseFileFilter
import org.arakhne.afc.vmutil.FileSystem
import java.net.URL
import java.io.FileInputStream

import org.arakhne.afc.gis.io.shape.GISShapeFileReader
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d
import org.arakhne.afc.gis.road.layer.RoadNetworkLayer
import org.arakhne.afc.gis.road.primitive.RoadNetworkException
import org.arakhne.afc.gis.maplayer.TreeMapElementLayer
import org.arakhne.afc.io.shape.ShapeElementType
import org.arakhne.afc.gis.road.RoadPolyline
import org.arakhne.afc.math.geometry.d2.d.Rectangle2d;
import org.arakhne.afc.io.shape.ESRIBounds
import org.arakhne.afc.gis.location.GeoLocationPointList

import java.io.IOException
import java.io.IOError
import logic.Map

import framework.math.Point2f

/** 
 * @author jerem, Thomas Gredin
 * 
 */
class RoadNetwork 
{
	var segments = new ArrayList<RoadSegment>();
	var connections = new ArrayList<RoadConnection>();
	
	/** Contains all elements loaded from the Shape file */
	var mapElements: MapElementLayer<?>;
	
	def getSegments: ArrayList<RoadSegment>
	{
		return segments;
	}
	
	def getConnections : ArrayList<RoadConnection>
	{
		return connections;
	}
	
	/** 
	 * Get all elements loaded in the given Shape file, Shape file 
	 * must be loaded with the loadFromShapeFile method
	 */
	def getMapElement: MapElementLayer<?>
	{
		return mapElements;
	}
	
	def initMap()
	{
		for(mapEl : mapElements)
		{
			var tmp = mapEl as RoadPolyline
			if(tmp == null)
				continue
				
			var listCon = new ArrayList<RoadConnection>
			for( pt : tmp.points)
			{
				var geoP = new GeoLocationPointList(pt.x,pt.y).toGeodesicPosition
				var newPoint = new Point2f(geoP.phi as float, geoP.lambda as float)
				
				var con = new RoadConnection(newPoint)
				
				if (!connections.exists[el|el.position.x == newPoint.x && el.position.y == newPoint.y])
					connections.add(con)
				
				listCon.add(con)
			}
			
			var rs = new RoadSegment(listCon.get(0), listCon.get(listCon.length - 1))
			if (!segments.exists[el|(el.start.position == rs.start.position && el.end.position == rs.end.position) || 
				(el.start.position == rs.end.position && el.end.position == rs.start.position)
			])
				segments.add(rs)
		}	
	}
	
	def loadShapeFile(filepath : String) : MapElementLayer<?> 
	{
		var file = new File(filepath)
		try
		{
			var network: StandardRoadNetwork = null
			var layer: MapElementLayer<MapElement> = null
			var dbfFile = FileSystem.replaceExtension(file, DBaseFileFilter.EXTENSION_DBASE_FILE)
			var dbfUrl: URL
			if (dbfFile.canRead()) 
				dbfUrl = dbfFile.toURI().toURL()
			else 
				dbfUrl = null
			try
			{
				var is: FileInputStream = new FileInputStream(file)		
				assert is != null
				
				try
				{
					var reader: GISShapeFileReader = new GISShapeFileReader(is, null, dbfUrl)
					var worldRect: Rectangle2d = new Rectangle2d()
					var esriBounds : ESRIBounds = reader.getBoundsFromHeader()
					
					worldRect.setFromCorners(esriBounds.getMinX(),esriBounds.getMinY(),esriBounds.getMaxX(),esriBounds.getMaxY())

					if (reader.getShapeElementType() == ShapeElementType.POLYLINE) {
						reader.setMapElementType(RoadPolyline)
					}

					var element: MapElement

					while ((element = reader.read()) != null) 
					{
						if (element instanceof RoadPolyline) 
						{
							if (network == null) 
								network = new StandardRoadNetwork(worldRect)
						
							var sgmt : RoadPolyline = element as RoadPolyline
							
							try 
							{
								//var car = new Car(new Point2f(sgmt.points.get(1).x - 10, sgmt.points.get(1).y-10),0,0,0,0)
								//println(sgmt)
								//sgmt.addAttributes(car.element)
								/*println("go")
								for(el : sgmt.attributes)
									println(el)
								*/
								//sgmt.addPoint(sgmt.points.get(1).x - 10, sgmt.points.get(1).y-10)
								network.addRoadSegment(sgmt)
								
							} 
							catch (e : RoadNetworkException) 
							{
								throw new RuntimeException(e)
							}
						} 
						else 
						{
							if (layer == null) 
								layer = new TreeMapElementLayer<MapElement>(worldRect)
							
							try 
							{
								layer.addMapElement(element)
							} 
							catch (e: RoadNetworkException) 
							{
								throw new RuntimeException(e)
							}
						}
					}
				}
				catch(exc : Exception)
				{ 
					println(exc.toString);
				}
			} 
			catch (ex : Exception) 
			{ 
				println(ex.toString);
			}
			
			if (network != null) 
			{
				var networkLayer: RoadNetworkLayer = new RoadNetworkLayer(network)
				mapElements = networkLayer
				return networkLayer
			}
			mapElements = layer
			return layer;
		} catch (exception: IOException) 
		{
			throw new IOError(exception);
		}
	}
}
