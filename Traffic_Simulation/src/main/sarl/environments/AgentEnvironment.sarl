/** 
 * 
 */
package environments

import agents.CarAgent
import agents.pathAStar
import agents.requestAStar
import framework.environment.AgentBody
import framework.environment.SimulationAgentReady
import framework.environment.StartSimulation
import framework.environment.StopSimulation
import framework.math.Point2f
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.HashMap
import java.util.HashSet
import org.arakhne.afc.gis.road.layer.RoadNetworkLayer
import org.arakhne.afc.gis.road.path.astar.RoadAStar
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.gis.road.primitive.RoadNetwork
import logic.PathUtils
import ui.ApplicationMap
import framework.environment.PerceptionEvent
import framework.environment.Percept
import framework.time.TimePercept
import framework.environment.InfluenceEvent
import java.util.UUID
import io.sarl.util.OpenEventSpaceSpecification
import java.util.List
import java.util.concurrent.atomic.AtomicInteger
import io.sarl.lang.core.Address
import io.sarl.util.OpenEventSpace
import java.util.concurrent.atomic.AtomicBoolean
import framework.environment.MotionInfluence
import java.util.ArrayList
import agents.DestinationReached
import io.sarl.core.Destroy

/** 
 * @author jerem
 * 
 */
agent AgentEnvironment
{
	uses Lifecycle, DefaultContextInteractions, Logging, Behaviors
		
	/* City environment */
	var environment : CityEnvironment;
	val influences = new AtomicInteger(0)
	var ^space : OpenEventSpace
	var myAdr : Address
	val freeze = new AtomicBoolean(false)
	var spaceId : UUID
	var spawnAgentDelay : double
	var carArrived = new ArrayList<UUID>();	
	
	on Initialize 
	{
		while(!ApplicationMap.instance.isReady)
		{
			debug("attend")
		}
		
		var spaceId = (occurrence.parameters.get(0) as UUID)
		this.^space = defaultContext.getSpace(spaceId)
		this.^space.register(asEventListener)
		this.myAdr = this.^space.getAddress(this.ID)
		spaceId = (occurrence.parameters.get(0) as UUID)
		spawnAgentDelay = 0;
		
		environment = new CityEnvironment()
		ApplicationMap.instance.agentBodyLayer.list = environment.agentBodies;
		ApplicationMap.instance.flashlightLayer.list = environment.trafficLights;
		//Test d'ajout d'agent et d'agent body
		environment.createAgentBody();
		environment.createAgentBody();
		/*environment.createAgentBody();
		environment.createAgentBody();
		environment.createAgentBody();
		environment.createAgentBody();
		 * environment.createAgentBody();
		 */
		var agentParameters : List<Object> = newArrayList(spaceId, this.ID)
		for (body : environment.agentBodies) {
			spawnInContextWithID(typeof(CarAgent), body.ID, defaultContext, agentParameters.toArray)
		}
		emit(new SimulationAgentReady)		
	}

	on StopSimulation {
		killMe
	}

	on StartSimulation {
		runEnvironmentBehavior
	}

	def runEnvironmentBehavior {
		
		this.freeze.set(true)
		try {
			computeCarArrived()
			carArrived = new ArrayList<UUID>();
			this.influences.set(0)
			this.environment.runBehaviour
			var delay = this.environment.timeManager.simulationDelay as long
			spawnAgentDelay += delay;
			if (delay > 0) {
				Thread::sleep(delay)
			}
			if (spawnAgentDelay > 5000) {
				initNewAgent();
				spawnAgentDelay = 0
			}
		} finally {
			this.freeze.set(false)
		}
		ApplicationMap.instance.update();
		notifyAgentsOrDie();
	}
	
	def notifyAgentsOrDie() {
		val timePercept = new TimePercept(
			this.environment.timeManager.currentTime,
			this.environment.timeManager.lastStepDuration);
			
		for(body : environment.agentBodies){
			var ev = new PerceptionEvent(
				body.perceivedObjects,
				new Percept(body),
				timePercept
			);
			emit(ev)[it.UUID == body.ID]
		}
	}

	def initNewAgent(){
		var agentID = environment.createAgentBody();
		var agentParameters : List<Object> = newArrayList(spaceId, this.ID)
		spawnInContextWithID(typeof(CarAgent),agentID, defaultContext, agentParameters.toArray)
	}

	/** 
	 * @author Marine
	 * 
	 * @description
	 * When the environment receive a perception's request from an agent, he sends back the list of perception
	 * 
	 */
	on requestAStar {
		var agentUUID = occurrence.ID;
		var startPosition : Point2f

		for (body : environment.agentBodies) {
			if (body.ID == agentUUID) {
				startPosition = body.position
				break;
			}

		}
		var startPoint = new Point2d(startPosition.x, startPosition.y);
		// environment = new CityEnvironment();
		var entryConnections = environment.getEntryExitConnections();

		var random = (Math.random() * environment.entryExitConnections.size) as int
		var endPoint = new Point2d(entryConnections.get(random).getPoint());
		while (endPoint == startPoint) {
			random = (Math.random() * environment.entryExitConnections.size) as int
			endPoint = new Point2d(entryConnections.get(random).getPoint());
		}

		var path = PathUtils.GPS(startPoint, endPoint, environment.roadNetwork);

		emit(new pathAStar(path))[it == occurrence.source]; 	// Send the path only to the agent who did the request
	}

	on InfluenceEvent {
		for (influence : occurrence.influences) {
			var id = influence.emitter
			if (id === null) {
				id = occurrence.source.UUID
			}
			var body = this.environment.getAgentBodyFor(id)
			body.influence(influence)
		}
		var v = this.influences.incrementAndGet
		if (v >= this.environment.getAgentBodyNumber()) {
			runEnvironmentBehavior
		}
	}

	on DestinationReached {
		println("Agent has reached his destination")
		carArrived.add(occurrence.ID);
	}

	def computeCarArrived() {
		for (car : this.carArrived) {
			removeAgentFromTheSimulation(car)
		}
	}

	/** 
	 * Retire un agent de la simulation
	 * @param UUID de l'agent
	 */
	def removeAgentFromTheSimulation(agentID : UUID) : void {
		//var car = this.environment.agentBodies.findFirst[body | body.ID == id]
		this.environment.removeAgentBodyFromList(agentID)
		emit(new Destroy())[it.UUID == agentID]
	}

}
