/** 
 * 
 */
package environments

import agents.CarAgent
import agents.pathAStar
import agents.requestAStar
import framework.environment.AgentBody
import framework.environment.SimulationAgentReady
import framework.environment.StartSimulation
import framework.environment.StopSimulation
import framework.math.Point2f
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.HashMap
import java.util.HashSet
import org.arakhne.afc.gis.road.layer.RoadNetworkLayer
import org.arakhne.afc.gis.road.path.astar.RoadAStar
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.gis.road.primitive.RoadNetwork
import logic.PathUtils
import ui.ApplicationMap

/** 
 * @author jerem
 * 
 */
agent AgentEnvironment
{
	uses Lifecycle, DefaultContextInteractions, Logging, Behaviors
		
	/* City environment */
	var environment : CityEnvironment;
	
	
	on Initialize 
	{
		while(!ApplicationMap.instance.isReady)
		{
			debug("attend")
		}
		environment = new CityEnvironment()
		
		//Test d'ajout d'agent et d'agent body
		environment.createAgentBody();
		/*environment.createAgentBody();
		environment.createAgentBody();
		environment.createAgentBody();
		environment.createAgentBody();
		environment.createAgentBody();
		environment.createAgentBody();*/
		
		for (body : environment.agentBodies) {
			spawnInContextWithID(typeof(CarAgent), body.ID, defaultContext, null)
		}

		//Test
		/*var car = new Car(
			new Point2f(
			environment.network.getMapElementAt(0).geoLocation.toBounds2D.maxX,
			environment.network.getMapElementAt(0).geoLocation.toBounds2D.maxY
			), 0, 0, 0, 0)
		spawnInContextWithID(typeof(CarAgent), car.ID, defaultContext)
		bodies.add(car);

		var car2 = new Car(new Point2f(
			network.getMapElementAt(3).geoLocation.toBounds2D.maxX,
			network.getMapElementAt(3).geoLocation.toBounds2D.maxY
		), 0, 0, 0, 0)
		spawnInContextWithID(typeof(CarAgent), car2.ID, defaultContext)
		bodies.add(car2);*/
		emit(new SimulationAgentReady)
				
	}

	on StopSimulation {
		killMe
	}

	on StartSimulation {
		runEnvironmentBehavior
	}

	def runEnvironmentBehavior {
		/*this.freeze.set(true)
		try {
			this.influences.set(0)
			this.environment.runBehaviour
			var delay = this.environment.timeManager.simulationDelay as long
			if (delay > 0) {
				Thread::sleep(delay)
			}
		} finally {
			this.freeze.set(false)
		}
		notifyAgentsOrDie*/
		info("runEnvironmentBehavior")
	}

	/** 
	 * @author Marine
	 * 
	 * @description
	 * When the environment receive a perception's request from an agent, he sends back the list of perception
	 * 
	 */
	on requestAStar 
	{
		var agentUUID = occurrence.ID;
		var startPosition : Point2f

		for(body : environment.agentBodies){
			if(body.ID == agentUUID){
				startPosition = body.position
				break;	
			}
			
		}
		info(startPosition)
		//environment = new CityEnvironment();
		
		//var entryConnections = environment.getEntryExitConnections();
		//var endPoint = new Point2d(entryConnections.get(3).getPoint());
		//var path = PathUtils.GPS(startPoint, endPoint, environment.roadNetwork);
		//emit(new pathAStar(path))[it == occurrence.source]; 	// Send the path only to the agent who did the request
    }


}
