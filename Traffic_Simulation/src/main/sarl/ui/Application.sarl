/** 
 * 
 */
package ui

import javafx.scene.Scene
import javafx.scene.layout.BorderPane
import javafx.stage.Stage
import org.arakhne.afc.gis.maplayer.MapElementLayer
import environments.RoadNetwork
import java.util.ArrayList
import org.arakhne.afc.gis.primitive.GISContainer
import org.arakhne.afc.gis.maplayer.MultiMapLayer
import org.arakhne.afc.nodefx.ZoomablePane
import org.arakhne.afc.gis.mapelement.MapCircle
import org.arakhne.afc.gis.maplayer.ArrayMapElementLayer
import org.arakhne.afc.gis.mapelement.MapPolygon
import org.arakhne.afc.gis.mapelement.MapElement

/** 
 * @author Thomas Gredin
 * 
 * @description Class that handle all stuff about window that display the feedback of the
 * animation of the simulation.
 */
class Application extends javafx.application.Application
{
	/** Variable to handle dragging events */
	var dragging: boolean;
	
	var mapElementsLayer: ArrayMapElementLayer;
	
	/** Create a singleton mimic to access instance outside */
	static var instance : Application;

	var roadNetworkLayer : MapElementLayer<?> 
	
	new()
	{
		instance = this;
	}
	
	def init()
	{
		var rd = new RoadNetwork
		/** Load the shape file content*/
		roadNetworkLayer = rd.loadShapeFile("asset/Ville.shp");
	}
	
	def start(primaryStage: Stage)
	{
		var root = new BorderPane()
		var scene = new Scene(root, 1024, 768)
		
		var containers = new ArrayList <MapElementLayer>
		
		
		

		if (roadNetworkLayer != null) {
			containers.add(roadNetworkLayer)
		}
		
		var circle = new MapCircle(940052, 2302886,4)
		//var circle = new MapCircle(0, 0, 1000)
		circle.color = 255
		
		var polygon = new MapPolygon()
		polygon.addPoint(940052, 2302886)
		polygon.addPoint(940052-20, 2302886)
		polygon.addPoint(940052-20, 2302886-20)
		polygon.addPoint(940052, 2302886-20)

		mapElementsLayer.addMapElement(polygon)
		containers.add(mapElementsLayer)
		
		
		// var carLayer : MapElementLayer
		//layer.addMapLayer()
			
		
		/** Create the GISContainer to display Roads Segments in the window */
		var container : GISContainer
		var layer : MultiMapLayer
		
		if (containers.size() == 1) {
			container = containers.get(0)
		} else {
			layer = new MultiMapLayer
				for (child : containers)
				{
					layer.addMapLayer(child);
				}
				
			container = layer;
		}
					
		/** Create scroll pane and put GISContainer inside */
		var scrollPane = new ZoomablePane(container)
		root.setCenter(scrollPane);
		
		/** Set global stage informations */
		primaryStage.setTitle("Traffic simulation !");
		primaryStage.setScene(scene);
		
		/** Show the stage in the window */
		primaryStage.show();
		
		// Launch the environment
	}
	
	/**
	 * @author Thomas Gredin
	 * 
	 * @description
	 * Add an element to draw into the map elements layer of the
	 * window.
	 */
	def addMapElement(element: MapElement)
	{
		mapElementsLayer.addMapElement(element);
	}
	
	/**
	 * @author Thomas Gredin
	 * 
	 * @description
	 * Remove given map element from the map elements layer.
	 */
	def removeMapElement(element: MapElement)
	{
		mapElementsLayer.removeMapElement(element);
	}
	
	/**
	 * @author Thomas Gredin
	 * 
	 * @description
	 * Get the singleton instance of the application
	 */
	static def getInstance(): Application
	{
		return instance;
	}
	
}