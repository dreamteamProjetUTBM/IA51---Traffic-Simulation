/** 
 * 
 */
package ui

import javafx.scene.Scene
import javafx.scene.layout.BorderPane
import javafx.stage.Stage
import org.arakhne.afc.gis.maplayer.MapElementLayer
import environments.RoadNetwork
import java.util.ArrayList
import org.arakhne.afc.gis.primitive.GISContainer
import org.arakhne.afc.gis.maplayer.MultiMapLayer
import org.arakhne.afc.gis.ui.GisPane
import org.arakhne.afc.nodefx.ZoomablePane
import javafx.scene.shape.Rectangle
import framework.math.Point2f
import framework.math.Rectangle2f
import org.arakhne.afc.gis.maplayer.TreeMapElementLayer
import org.arakhne.afc.gis.mapelement.MapElement

/** 
 * @author Thomas Gredin
 * 
 * @description Class that handle all stuff about window that display the feedback of the
 * animation of the simulation.
 */
class Application extends javafx.application.Application
{
	/** Variable to handle dragging events */
	var dragging: boolean;
	
	/** Create a singleton mimic to access instance outside */
	static var instance: Application;
	
	new()
	{
		instance = this;
	}
	
	def init()
	{
		// Initialization stuff for application
	}
	
	def start(primaryStage: Stage)
	{
		var root = new BorderPane()
		var scene = new Scene(root, 1024, 768)
		
		var containers = new ArrayList <MapElementLayer>
		var rd = new RoadNetwork
		
		/** Load the shape file content */
		var loadedResource = rd.loadShapeFile("asset/Ville.shp");	
		
		if (loadedResource != null) {
			containers.add(loadedResource)
		}
		
		/** Create the GISContainer to display Roads Segments in the window */
		var container : GISContainer
		var layer : MultiMapLayer
		
		if (containers.size() == 1) {
			container = containers.get(0)
		} else {
			layer = new MultiMapLayer
				for (child : containers)
				{
					layer.addMapLayer(child);
				}
			container = layer;
		}
		
		/** Create scroll pane and put GISContainer inside */
		var scrollPane = new ZoomablePane(container)
		root.setCenter(scrollPane);
		
		/** Set global stage informations */
		primaryStage.setTitle("Traffic simulation !");
		primaryStage.setScene(scene);
		
		/** Show the stage in the window */
		primaryStage.show();
		
		// Launch the environment
	}
	
	/**
	 * @author Thomas Gredin
	 * 
	 * @description
	 * setupRoadNetwork
	 * 
	 * Function that create GISContainer.
	 * This container handle the display of the map which is extracted from
	 * the loaded Shape file.
	 * 
	 * @return GISContainer ready to be used
	 */
	def setupRoadNetworkContainer(elements: MapElementLayer): boolean
	{
		return true;
	}
	
	/**
	 * @author Thomas Gredin
	 * 
	 * @description
	 * Get the singleton instance of the application
	 */
	static def getInstance(): Application
	{
		return instance;
	}
	
}