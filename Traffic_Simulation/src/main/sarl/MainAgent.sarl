import environments.RoadNetwork
import framework.FrameworkLauncher
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.List
import org.arakhne.afc.gis.maplayer.MapElementLayer
import ui.Application
import agents.CarGPSAgent
import agents.CarMapAgent
import environments.Environment
import framework.gui.BehaviorTypeSelector
import javafx.stage.Stage
import ui.ApplicationAgent
import framework.environment.SimulationAgentReady
import framework.environment.StartSimulation
import io.sarl.core.DefaultContextInteractions

/**
 * @description
 * Agent MainAgent.
 * 
 * This agent is used to setup and launch the application.
 */
agent MainAgent extends FrameworkLauncher 
{	
	uses Lifecycle;
	uses Logging;
	uses DefaultContextInteractions
	
	//pour tester
	var rd = new RoadNetwork();

	/*
	 * Size of the screen
	 */
	val WORLD_SIZE_X = 1280f;
	val WORLD_SIZE_Y = 640f;
		
	on Initialize 
	{
		// Nothing to do here	
	}
	
	override initializeSimulation(parameters : List<Object>) : boolean 
	{
		(new Thread() {	def run()
			{
				Application.launch(Application);
				
			}
		}).start();
		
		/** Spawn the environment that manage all others agents */
		spawn(Environment);
		
		return true;
	}

	on SimulationAgentReady [!occurrence.fromMe] {
		synchronized (this) {
			//waitingAgents--
			//if (waitingAgents <= 0) {
				emit(new StartSimulation)
				killMe
			//}
		}
	}
	
}
