/** 
 * 
 */
package agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.DefaultContextInteractions
import agents.requestAStar
import agents.pathAStar
import framework.environment.PerceptionEvent

import java.util.List
import framework.environment.Percept
import framework.^agent.MotionAlgorithmOutput
import framework.environment.Influence
import framework.environment.DynamicType
import framework.math.Vector2f
import framework.^agent.PhysicEnvironment
import framework.math.MathUtil
import framework.^agent.StandardPhysicEnvironment
import framework.math.Point2f
import framework.environment.InfluenceEvent
import java.util.ArrayList
import org.arakhne.afc.gis.road.primitive.RoadSegment
import framework.environment.MotionInfluence
import org.arakhne.afc.math.geometry.d2.d.Point2d
import java.lang.reflect.Array
import io.sarl.core.Lifecycle

/** 
 * @author jerem
 * 
 */
agent CarAgent {
	uses Logging, DefaultContextInteractions, PhysicEnvironment, Lifecycle

	var behaviorType : DynamicType
	var path : ArrayList<RoadSegment>
	
	var fromBeginToEnd = true
	var length : double
	
	var isBeginning = true
	var isArrived = false;
	
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("VehicleAgent was started.")
		behaviorType = DynamicType::STEERING
		emit( new requestAStar(this.ID));
		length = 0
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("VehicleAgent agent was stopped. " + this.ID)
		killMe()
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}
	
	on pathAStar{
		path = occurrence.pathReturn;
		
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
	
	on PerceptionEvent { 
		
		//for(o :occurrence.perceptions){
			/*if (o instanceof TrafficLight) {
				if((o as TrafficLight).state == TrafficLightColor.RED){
					//Décéléré la voiture
				}
			}
			if (o instanceof StopSign) {
			}
		 * }
			 */
			 
		var currentPos = new Point2d(occurrence.body.position.x, occurrence.body.position.y);
		 
		 if (path == null || path.empty) {
			if(!isBeginning){
				destionationReached();
			}
			emit(new InfluenceEvent());	
			return
		}
		
		var segment = path.get(0)
		if (isBeginning) {
			changeDirection(currentPos,segment);
			isBeginning = false;
		}

		var distanceMin : float = occurrence.perceptionDistance
		var object : Percept
		for (o : occurrence.perceptions) {
			var distance = Math.abs((occurrence.body.position - o.body.position).length)
			if (distance <= distanceMin && path.get(0).contains(new Point2d(o.position.x, o.position.y))) {
				object = o;
				distanceMin = distance;
			}
		}

		var accelerationCar : double

		/* 
		 * if(object.type == "LIGHT"){ 
		 * if((object.body as TrafficLight).state == TrafficLightColor.RED){
		 * var a = occurrence.body.maxLinearAcceleration
		 * var v = occurrence.body.currentLinearSpeed
		 * var vf = occurrence.body.maxLinearSpeed
		 * var adherence = 4
		 * var s = ((v/10)*6)+10
		 * var b = (v**2)/(2*distanceMin)
		 * var T = distanceMin / vf
		 * var deltaV = v
		 * accelerationCar = 1 - ((v/vf)**adherence);
		 * var part1 = (s+v*T)/distanceMin
		 * var part2 = (v*deltaV)/(2*distanceMin*(Math.sqrt(a*b)))
		 * accelerationCar -= (part1 + part2)**2
		 * accelerationCar = accelerationCar * a
		 * }						
		 * else{
		 * 
		 * }
		 * }
		 * else{
		 * if (object.type === "SIGN") {
		 * 
		 * 
		 * 
		 * }
		 * else{
		 * if (object.type === "BODY") { // agent
		 * 
		 * }
		 * }
		 * }
		 */
		
		if (fromBeginToEnd) {
			length = length + occurrence.body.maxLinearAcceleration*0.01f;
		}
		else {
			length = length - occurrence.body.maxLinearAcceleration*0.01;	
		}
		
		
		if(fromBeginToEnd && length >= segment.length){
			length = segment.length;
			path.remove(0)
			
			if (path.empty) {
				destionationReached();
				emit(new InfluenceEvent());	
				return
			}
			segment = path.get(0);
			
			changeDirection(currentPos,segment)
			
		}
		else if (!fromBeginToEnd && length <= 0) {
			length = 0;
			path.remove(0)
			
			if (path.empty) {
				destionationReached();
				emit(new InfluenceEvent());	
				return
			}
			segment = path.get(0);
			changeDirection(currentPos,segment)
		}
		
		var newPos = new Vector2f(segment.getGeoLocationForDistance(length).x, segment.getGeoLocationForDistance(length).y)
		var direction = new Vector2f((newPos.x - currentPos.x)*0.1f,(newPos.y - currentPos.y)*0.1f)
		//println(length + " - " + segment.length + " - "+ direction)

		var influences = Array::newInstance(typeof(Influence),1) as Influence[];
		influences.set(0, new MotionInfluence(DynamicType::KINEMATIC, this.ID , direction, 180f))
		var infEnv = new InfluenceEvent(influences)
		
		//infEnv.influences.add()
		
		emit(infEnv); 
	}
	
	private def destionationReached(){
		if(!isArrived){
			emit(new DestinationReached(this.ID));
			isArrived = true;
		}
	}
	
	private def changeDirection(currentPos : Point2d,segment : RoadSegment) {
		var distanceB = new Vector2f(segment.beginPoint.point.x - currentPos.x,	segment.beginPoint.point.y - currentPos.y)
		var distanceE = new Vector2f(segment.endPoint.point.x - currentPos.x, segment.endPoint.point.y - currentPos.y)
		var normeE = distanceE.length
		var normeB = distanceB.length
		if (normeB < normeE) {
			fromBeginToEnd = true;
			length = 0;
		} else {
			fromBeginToEnd = false;
			length = segment.length;
		}
	}

		
}
