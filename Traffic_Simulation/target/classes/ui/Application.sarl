/** 
 * 
 */
package ui

import javafx.scene.Scene
import javafx.scene.layout.BorderPane
import javafx.stage.Stage
import org.arakhne.afc.gis.maplayer.MapElementLayer
import environments.RoadNetwork
import java.util.ArrayList
import org.arakhne.afc.gis.primitive.GISContainer
import org.arakhne.afc.gis.maplayer.MultiMapLayer
import org.arakhne.afc.nodefx.ZoomablePane
import org.arakhne.afc.gis.mapelement.MapCircle
import org.arakhne.afc.gis.maplayer.ArrayMapElementLayer
import org.arakhne.afc.gis.mapelement.MapPolygon
import org.arakhne.afc.gis.mapelement.MapElement

/** 
 * @author Thomas Gredin
 * 
 * @description Class that handle all stuff about window that display the feedback of the
 * animation of the simulation.
 */
class Application extends javafx.application.Application
{
	/** Variable to handle dragging events */
	var dragging: boolean;
	
	var agentBodyLayer = new ArrayMapElementLayer<MapPolygon>;
	var stopLayer = new ArrayMapElementLayer<MapPolygon>;
	var flashlightLayer = new ArrayMapElementLayer<MapCircle>;
	
	/** Create a singleton mimic to access instance outside */
	static var instance : Application;

	var roadNetworkLayer : MapElementLayer<?> 
	
	new()
	{
		instance = this;
	}
	
	def init()
	{
		var rd = new RoadNetwork
		/** Load the shape file content*/
		roadNetworkLayer = rd.loadShapeFile("asset/Ville.shp");
	}
	
	def start(primaryStage: Stage)
	{
		var root = new BorderPane()
		var scene = new Scene(root, 1024, 768)
		
		var containers = new ArrayList <MapElementLayer>
		if (roadNetworkLayer != null) 
		{
			containers.add(roadNetworkLayer)
		}
		
		containers.add(agentBodyLayer);
		containers.add(stopLayer);
		containers.add(flashlightLayer);
		
		
		
		
		
		var poly = new MapPolygon()
		poly.addPoint(940050, 2302880)
		poly.addPoint(940050-40, 2302880)
		poly.addPoint(940050-40, 2302880-40)
		poly.addPoint(940050, 2302880-40)
		
		agentBodyLayer.addMapElement(poly)
		
		/** Create the GISContainer to display Roads Segments in the window */
		var container : GISContainer;
		var layer : MultiMapLayer;
		
		if (containers.size() == 1) 
		{
			container = containers.get(0);
		} 
		else 
		{
			layer = new MultiMapLayer;
			for (child : containers)
			{
				layer.addMapLayer(child);
			}
				
			container = layer;
		}
					
		/** Create scroll pane and put GISContainer inside */
		var scrollPane = new ZoomablePane(container)
		root.setCenter(scrollPane);
		
		/** Set global stage informations */
		primaryStage.setTitle("Traffic simulation !");
		primaryStage.setScene(scene);
		
		/** Show the stage in the window */
		primaryStage.show();
		
		// Launch the environment
	}
	
	/**
	 * @author Thomas Gredin
	 * 
	 * @description
	 * Add an element to draw into the map elements layer of the
	 * window.
	 */
	def addAgentBodyInLayer(element: MapPolygon)
	{
		agentBodyLayer.addMapElement(element);
	}
	
	/**
	 * @author Thomas Gredin
	 * 
	 * @description
	 * Remove given map element from the map elements layer.
	 */
	def removeAgentBodyInLayer(element : MapPolygon)
	{
		agentBodyLayer.removeMapElement(element);
	}

	def addStopInLayer(element : MapPolygon) {
		stopLayer.addMapElement(element);
	}

	def removeStopInLayer(element : MapPolygon) {
		stopLayer.removeMapElement(element);
	}

	def addFlashlightInLayer(element : MapCircle) {
		flashlightLayer.addMapElement(element);
	}

	def removeFlashlightInLayer(element : MapCircle) {
		flashlightLayer.removeMapElement(element);
	}
	
	/**
	 * @author Thomas Gredin
	 * 
	 * @description
	 * Get the singleton instance of the application
	 */
	static def getInstance(): Application
	{
		return instance;
	}
	
}