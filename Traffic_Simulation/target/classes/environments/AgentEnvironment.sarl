/** 
 * 
 */
package environments

import agents.CarAgent
import agents.pathAStar
import agents.requestAStar
import framework.environment.SimulationAgentReady
import framework.environment.StartSimulation
import framework.environment.StopSimulation
import framework.math.Point2f
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import org.arakhne.afc.math.geometry.d2.d.Point2d
import logic.PathUtils
import ui.ApplicationMap
import framework.environment.PerceptionEvent
import framework.environment.Percept
import framework.time.TimePercept
import framework.environment.InfluenceEvent
import java.util.UUID
import java.util.List
import java.util.concurrent.atomic.AtomicInteger
import io.sarl.lang.core.Address
import io.sarl.util.OpenEventSpace
import java.util.concurrent.atomic.AtomicBoolean
import java.util.ArrayList
import agents.DestinationReached
import io.sarl.core.Destroy
import agents.TrafficLightControllerAgent
import agents.AskChangementFlashLight
import agents.AskForLinkedFlashLights
import agents.GiveLinkedFlashLights
import agents.ChangeTrafficLight

/** 
 * Agent environment
 * 
 */
agent AgentEnvironment
{
	uses Lifecycle, DefaultContextInteractions, Logging, Behaviors
		
	/* City environment */
	var environment : CityEnvironment;
	
	/*
	 * Influences
	 */
	val influences = new AtomicInteger(0)
	
	/*
	 * Current space
	 */
	var ^space : OpenEventSpace
	
	/*
	 * Current address
	 */
	var myAdr : Address
	
	/*
	 * Is freezing
	 */
	val freeze = new AtomicBoolean(false)
	
	/*
	 * SpaceID
	 */
	var spaceId : UUID
	
	/*
	 * Delay to spawn a new agent
	 */
	var spawnAgentDelay : double
	
	/*
	 * Cars arrived to their destinations
	 */
	var carArrived = new ArrayList<UUID>();
	
	/*
	 * Traffic lights controller in the map
	 */
	var trafficLightsControllers = new ArrayList<UUID>
	
	on Initialize 
	{
		//Wait the ApplicationMap ready
		while(!ApplicationMap.instance.isReady)
		{
			debug("wait")
		}
		
		var spaceId = (occurrence.parameters.get(0) as UUID)
		this.^space = defaultContext.getSpace(spaceId)
		this.^space.register(asEventListener)
		this.myAdr = this.^space.getAddress(this.ID)
		spaceId = (occurrence.parameters.get(0) as UUID)
		spawnAgentDelay = 0;
		
		environment = new CityEnvironment()
		
		//Link the agent bodies and the traffic light to their application layer
		ApplicationMap.instance.agentBodyLayer.list = environment.agentBodies;
		ApplicationMap.instance.flashlightLayer.list = environment.trafficLights;
		
		//Create a 1st agent to begin
		environment.createAgentBody();
		
		var agentParameters : List<Object> = newArrayList(spaceId, this.ID)
		
		//Spawn an agent for a corresponding agent body
		for (body : environment.agentBodies) {
			spawnInContextWithID(typeof(CarAgent), body.ID, defaultContext, agentParameters.toArray)
		}
		
		//Spawn each traffic light controller agent
		for (var i = 0; i < environment.trafficLightsGroups.size; i++) {
			var tlcontrollerID = UUID.randomUUID
			spawnInContextWithID(typeof(TrafficLightControllerAgent), tlcontrollerID, defaultContext,
				agentParameters.toArray)
			trafficLightsControllers.add(tlcontrollerID);
		}
		
		//Send an event to inform the simulator that the simulation is ready
		emit(new SimulationAgentReady)		
	}

	on StopSimulation {
		killMe
	}

	on StartSimulation {
		runEnvironmentBehavior
	}

	/**
	 * Define the environment behavior
	 */
	def runEnvironmentBehavior {
		
		this.freeze.set(true)
		try {
			//Send an event to kill the car agent if they're to their destination
			computeCarArrived()
			carArrived = new ArrayList<UUID>();
			
			this.influences.set(0)
			
			//Run the environment behavior
			this.environment.runBehaviour
			
			//Calculate the new delay
			var delay = this.environment.timeManager.simulationDelay as long
			spawnAgentDelay += delay;
			if (delay > 0) {
				Thread::sleep(delay)
			}
			//Spawn an new car agent
			if (spawnAgentDelay > 5000) {
				initNewAgent();
				spawnAgentDelay = 0
			}
		} finally {
			this.freeze.set(false)
		}
		//Update application layers
		ApplicationMap.instance.update();
		notifyAgentsOrDie();
	}
	
	/**
	 * Send event to agents
	 */
	def notifyAgentsOrDie() {
		val timePercept = new TimePercept(
			this.environment.timeManager.currentTime,
			this.environment.timeManager.lastStepDuration);

		//Ask for an update for each traffic light controller
		for (controller : trafficLightsControllers) {
			var ev = new AskChangementFlashLight(timePercept.lastStepDuration);
			emit(ev)[it.UUID == controller]
		}
		
		//Send a perception to each agent 
		for(body : environment.agentBodies){
			var ev = new PerceptionEvent(
				body.perceivedObjects,
				new Percept(body),
				timePercept,
				body.perceptionDistance 
			);
			emit(ev)[it.UUID == body.ID]
		}
	}

	/**
	 * Initialize a car 
	 */
	def initNewAgent(){
		var agentID = environment.createAgentBody();
		var agentParameters : List<Object> = newArrayList(spaceId, this.ID)
		spawnInContextWithID(typeof(CarAgent),agentID, defaultContext, agentParameters.toArray)
	}

	/** 
	 * @author Marine
	 * 
	 * @description
	 * When the environment receive a perception's request from an agent, he sends back the list of perception
	 * 
	 */
	on requestAStar {
		var agentUUID = occurrence.ID;
		var startPosition : Point2f

		for (body : environment.agentBodies) {
			if (body.ID == agentUUID) {
				startPosition = body.position
				break;
			}

		}
		var startPoint = new Point2d(startPosition.x, startPosition.y);
		var entryConnections = environment.getEntryExitConnections();

		var random = (Math.random() * environment.entryExitConnections.size) as int
		var endPoint = new Point2d(entryConnections.get(random).getPoint());
		//To be sure that the starting point is not the ending one
		while (endPoint == startPoint) {
			random = (Math.random() * environment.entryExitConnections.size) as int
			endPoint = new Point2d(entryConnections.get(random).getPoint());
		}
		var path = PathUtils.GPS(startPoint, endPoint, environment.roadNetwork);

		// Send the path only to the agent who did the request
		emit(new pathAStar(path))[it == occurrence.source]; 	
	}

	/**
	 * Receive influence from car agent
	 */
	on InfluenceEvent {
		for (influence : occurrence.influences) {
			var id = influence.emitter
			if (id === null) {
				id = occurrence.source.UUID
			}
			var body = this.environment.getAgentBodyFor(id)
			body.influence(influence)
		}
		waitAllAgentsInfluences
	}
	
	/**
	 * Traffic light controller asks for traffic lights
	 */
	on AskForLinkedFlashLights {
		var trafficLightsGroups = environment.trafficLightsGroups
		if (trafficLightsGroups.size > 0) {
			var group = trafficLightsGroups.remove(0);
			var ev = new GiveLinkedFlashLights(group.get(0).ID, group.get(1).ID, group.get(2).ID, group.get(3).ID)
			emit(ev)[it.UUID == occurrence.ID];
		}
	}
	
	/**
	 * Receive new states for each traffic light
	 */
	on ChangeTrafficLight {
		for (green : occurrence.greens) {
			this.environment.setStateTrafficLight(TrafficLightColor.GREEN, green);
		}
		for (orange : occurrence.oranges) {
			this.environment.setStateTrafficLight(TrafficLightColor.ORANGE, orange);
		}
		for (red : occurrence.reds) {
			this.environment.setStateTrafficLight(TrafficLightColor.RED, red);
		}
		waitAllAgentsInfluences
	}

	/**
	 * Wait all agents to send an influence
	 */
	def waitAllAgentsInfluences() {
		var v = this.influences.incrementAndGet
		if (v >= (this.environment.getAgentBodyNumber() + trafficLightsControllers.size)) {
			runEnvironmentBehavior
		}
	}

	/**
	 * When a car has reached his destination 
	 */
	on DestinationReached {
		//println("Agent has reached his destination")
		carArrived.add(occurrence.ID);
	}

	/**
	 * Remove car from the simulation
	 */
	def computeCarArrived() {
		for (car : this.carArrived) {
			this.environment.removeAgentBodyFromList(car)
			emit(new Destroy())[it.UUID == car]
		}
	}
}
