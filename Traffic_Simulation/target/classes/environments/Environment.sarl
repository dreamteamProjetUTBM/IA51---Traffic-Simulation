/** 
 * 
 */
package environments

import framework.environment.AbstractEnvironment
import framework.environment.AgentBody
import framework.environment.Influence
import framework.environment.MotionInfluence
import framework.environment.Percept
import framework.environment.SituatedObject
import framework.time.TimeManager
import java.util.Collection
import java.util.List
import org.arakhne.afc.gis.maplayer.MapElementLayer
import ui.Application
import framework.time.StepTimeManager
import java.text.MessageFormat
import framework.math.MathUtil
import java.util.UUID
import framework.math.Rectangle2f
import io.sarl.core.Lifecycle
import io.sarl.core.Initialize
import agents.CarGPSAgent
import framework.math.Point2f
import io.sarl.core.DefaultContextInteractions
import java.util.HashSet

/** 
 * @author jerem
 * 
 */
agent Environment
{
	uses Lifecycle, DefaultContextInteractions
	
	/** Contains all bodies */
	var bodies: HashSet<AgentBody>;
	
	var roadNetwork : RoadNetwork;

	on Initialize 
	{
		while(!Application.instance.isReady)
		{
		}
		
		bodies = new HashSet<AgentBody>();
		
		//Test
		var car = new Car(new Point2f(940050, 2302880),0,0,0,0)
		spawnInContextWithID(typeof(CarGPSAgent),car.ID,defaultContext)
		bodies.add(car);
	}

	/**
	 * @author Thomas Gredin
	 * 
	 * @description
	 * Compute perceptions for each bodies in the environment.
	 */
	def computePerceptions()
	{
		for(body: bodies)
		{
			// compute perceptions for body
		}
	}
}
