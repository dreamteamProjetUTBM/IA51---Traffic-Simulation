/** 
 * 
 */
package environments

import framework.environment.AbstractEnvironment
import framework.environment.AgentBody
import java.util.List
import framework.environment.Influence
import framework.environment.Percept
import java.util.Collection
import framework.environment.MotionInfluence
import framework.time.TimeManager
import framework.environment.SituatedObject

/**
 * @author Thomas Gredin
 * 
 * @description
 * Class used by the environment agent.
 */
class CityEnvironment extends AbstractEnvironment
{
	protected def onAgentBodyCreated(body : AgentBody) 
	{
	}
	
	protected def onAgentBodyDestroyed(body : AgentBody) 
	{
	}
	
	protected def computeEndogenousBehaviorInfluences : List<Influence> 
	{
	}
	
	protected def computePerceptionsFor(^agent : AgentBody) : List<Percept> 
	{
	}
	
	protected def applyInfluences(motionInfluences : Collection<MotionInfluence>, otherInfluences : Collection<Influence>, timeManager : TimeManager) 
	{
	}
	
	def getAllObjects : Iterable<? extends SituatedObject> 
	{
	}
}