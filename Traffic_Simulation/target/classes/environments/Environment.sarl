/** 
 * 
 */
package environments

import framework.environment.AbstractEnvironment
import framework.environment.AgentBody
import java.util.List
import framework.environment.Influence
import framework.environment.Percept
import java.util.Collection
import framework.environment.MotionInfluence
import framework.time.TimeManager
import framework.environment.SituatedObject
import java.util.UUID

/** 
 * @author jerem
 * 
 */
class Environment extends AbstractEnvironment
{
	var roadNetwork: RoadNetwork;
	
	/**
	 * @author Thomas Gredin
	 * 
	 * @description
	 * Method to initialize the environment.
	 * Here we load the given Shape file and give it to the Application
	 * that will create the GISContainer to display road segments in
	 * the window.
	 */
	protected def initialize(filepath: String)
	{
		roadNetwork = new RoadNetwork();
		roadNetwork.loadShapeFile(filepath);
	}
		
	protected def onAgentBodyCreated(body : AgentBody) 
	{
		
	}
	
	protected def onAgentBodyDestroyed(body : AgentBody) 
	{
		
	}
	
	protected def computeEndogenousBehaviorInfluences : List<Influence> 
	{
		
	}
	
	protected def computePerceptionsFor(^agent : AgentBody) : List<Percept> 
	{
		
	}
	
	protected def applyInfluences(
		motionInfluences : Collection<MotionInfluence>, 
		otherInfluences : Collection<Influence>, 
		timeManager : TimeManager
	) 
	{
		
	}
	
	def getAllObjects : Iterable<? extends SituatedObject> 
	{
		
	}

	/*def createBody(type : String) {
		/*var body = new AgentBody(UUID::randomUUID, new Circle2f(0f, 0f, RABBIT_SIZE), // body
				5f,						// max linear speed m/s
		0.5f,						// max linear acceleration (m/s)/s
		MathUtil::PI / 4f, // max angular speed r/s
		MathUtil::PI / 10f, // max angular acceleration (r/s)/s
		null); // no frustum since computePerceptionsFor() is not using this parameter
		body.name = MessageFormat::format("Body #{0}", this.agentBodyNumber + 1)
		body.type = type
		addAgentBody(body, randomPosition, Math::random as float * MathUtil::TWO_PI)
	}*/

}
