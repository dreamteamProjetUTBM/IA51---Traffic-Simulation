/** 
 * 
 */
package environments

import framework.environment.AbstractEnvironment
import framework.environment.AgentBody
import framework.environment.Influence
import framework.environment.MotionInfluence
import framework.environment.Percept
import framework.environment.SituatedObject
import framework.time.TimeManager
import java.util.Collection
import java.util.List
import org.arakhne.afc.gis.maplayer.MapElementLayer
import ui.Application
import framework.time.StepTimeManager
import java.text.MessageFormat
import framework.math.MathUtil
import java.util.UUID
import framework.math.Rectangle2f
import io.sarl.core.Lifecycle
import io.sarl.core.Initialize
import agents.CarGPSAgent
import framework.math.Point2f
import io.sarl.core.DefaultContextInteractions
import java.util.HashSet
import org.arakhne.afc.gis.road.layer.RoadNetworkLayer
import io.sarl.core.Logging
import java.util.ArrayList
import org.arakhne.afc.gis.mapelement.MapElement
import java.util.Map
import java.util.HashMap
import org.arakhne.afc.gis.location.GeoLocation
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.gis.road.path.astar.RoadAStar
import agents.pathAStar
import agents.requestAStar

/** 
 * @author jerem
 * 
 */
agent Environment
{
	uses Lifecycle, DefaultContextInteractions,Logging
	
	/** Contains all bodies */
	var bodies: HashSet<AgentBody>;
	var environmentObjects : HashSet<EnvironmentObject>

	/** Contains all data to draw Road Segments using JavaFX */
	var roadNetwork : RoadNetwork;
	var network : RoadNetworkLayer; // MapElementLayer<?>
	
	/** Contains all data about road segments */
	var roadSegmentDataCollection: RoadSegmentDataCollection;

	on Initialize 
	{
		while(!Application.instance.isReady)
		{
			info("attend")
		}
		
		network = Application.instance.roadNetworkLayer as RoadNetworkLayer
		bodies = new HashSet<AgentBody>();
		environmentObjects = new HashSet<EnvironmentObject>()
		roadSegmentDataCollection= new RoadSegmentDataCollection();

		var stops = new HashMap<Point2d, Integer>();
		
		//Get all road segments and iterate on them to find 
		//the road connections which are used multiple times
		for (seg : network.roadNetwork.roadSegments)
		{
			/** Create new RoadSegmentData for the current road segment */
			var roadSegmentData : RoadSegmentData = new RoadSegmentData(seg);
			
			var pts = seg.points;
			for (pt : pts) 
			{
				if (stops.containsKey(pt)) 
				{
					stops.replace(pt, (stops.get(pt) + 1) as Integer);
				} 
				else 
				{
					stops.put(pt, new Integer(1));	
				}
			}

			/** Add the segment data to the collection */
			roadSegmentDataCollection.add(roadSegmentData);
		}
		
		var stop : StopSign
		var trafficLight : TrafficLight
		
		//For each connections, depending on the number, it creates
		// a stop sign or a traffic light on the map
		for(key : stops.keySet)
		{	
			var cpt = stops.get(key);
			if(cpt == 3)
			{
				stop = new StopSign(new Point2f(key.x,key.y));
				environmentObjects.add(stop);
				
				/** Get all road segments data that are in this connection */
				roadSegmentDataCollection.findRoadSegmentsForConnection(key);
			}
			else if(cpt > 3)
			{
				// Idem pour le feu
				trafficLight = new TrafficLight(new Point2f(new Point2f(key.x, key.y)));
				trafficLight.changeColor(TrafficLightColor.GREEN);
				environmentObjects.add(trafficLight);
			}
		}

		//Test
		var car = new Car(
			new Point2f(network.getMapElementAt(0).geoLocation.toBounds2D.maxX,	
				network.getMapElementAt(0).geoLocation.toBounds2D.maxY
			), 0, 0, 0, 0)
		spawnInContextWithID(typeof(CarGPSAgent),car.ID,defaultContext)
		bodies.add(car);
				
	}

	/** 
	 * @author Marine
	 * 
	 * @description
	 * When the environment receive a perception's request from an agent, he sends back the list of perception
	 * 
	 */
	on requestAStar {

		//
		var AStar = new RoadAStar();
		// var path = AStar.solve(RoadConnection startPoint, Point2D<?,?> endPoint,RoadNetwork network);
		emit(new pathAStar)[it == occurrence.source]; 	// Send the path only to the agent who did the request
    }

	/**
	 * @author Thomas Gredin
	 * 
	 * @description
	 * Compute perceptions for each bodies in the environment.
	 */
	def computePerceptions()
	{
		for(body: bodies)
		{
			for(o: body.perceivedObjects)
			{
				// Look for road signs
				
				// Look for others cars
			}
		}
	}
	
	/**
	 * @author Thomas Gredin
	 * 
	 * @description
	 * Update the environment...
	 */
	def update()
	{
		for(body: bodies)
		{
			
		}
	}
}
