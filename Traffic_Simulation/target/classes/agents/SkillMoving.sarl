/** 
 * 
 */
package agents

import io.sarl.core.Logging
import io.sarl.lang.core.Capacity
import org.newdawn.slick.geom.Vector2f

/** 
 * @author jerem
 * 
 */
skill SkillGPSMoving implements MovingVehicle {
	uses Logging

	def install {
		// Function invoked when the skill is installed in the owner.
		// You should put all the initialization statements in this block of code.
		info("Installing the skill")
	}

	def uninstall {
		// Function invoked when the skill is uninstalled from the owner.
		// You should put all the resource release statements in this block of code.
		info("Uninstalling the skill")
	}
	
	def moveVehicle(from : Vector2f, to : Vector2f, speed : double) : Vector2f {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
}

skill SkillBasicMoving implements MovingVehicle {
	uses Logging

	def install {
		// Function invoked when the skill is installed in the owner.
		// You should put all the initialization statements in this block of code.
		info("Installing the skill")
	}

	def uninstall {
		// Function invoked when the skill is uninstalled from the owner.
		// You should put all the resource release statements in this block of code.
		info("Uninstalling the skill")
	}

	def moveVehicle(from : Vector2f, to : Vector2f, speed : double) : Vector2f {
		var newPos = new Vector2f

		if (from.x < to.x && from.y < to.y) {
			newPos = new Vector2f(from.x - 1, from.y - 1);
		} else if (from.x > to.x && from.y > to.y) {
			newPos = new Vector2f(from.x + 1, from.y + 1);
		} else if (from.x > to.x && from.y == to.y) {
			newPos = new Vector2f(from.x + 1, from.y);
		} else if (from.x > to.x && from.y < to.y) {
			newPos = new Vector2f(from.x + 1, from.y - 1);
		} else if (from.x == to.x && from.y > to.y) {
			newPos = new Vector2f(from.x, from.y + 1);
		} else if (from.x == to.x && from.y < to.y) {
			newPos = new Vector2f(from.x, from.y - 1);
		} else if (from.x < to.x && from.y > to.y) {
			newPos = new Vector2f(from.x - 1, from.y + 1);
		} else if (from.x < to.x && from.y == to.y) {
			newPos = new Vector2f(from.x - 1, from.y);
		}
		
		return newPos
	}

}
