/** 
 * 
 */
package agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import environments.Car
import io.sarl.core.DefaultContextInteractions
import org.arakhne.afc.gis.road.path.RoadPath
import org.arakhne.afc.gis.road.primitive.RoadSegment
import framework.environment.PerceptionEvent


/** 
 * @author jerem, marine, aurel
 *  
 */
agent CarGPSAgent extends VehicleAgent{
	uses Logging, DefaultContextInteractions

	var currentRoad : RoadSegment
	var nextRoad : RoadSegment
	var lastRoad : RoadSegment
	var path : RoadPath

	on Initialize {
		setSkill(new SkillGPSMoving)
		info("CarGPSAgent was started." + this.ID)
		
		emit(new requestAStar)
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("CarGPSAgent was stopped.")
	}

	on pathAStar {
		info("a*")
		path = occurrence.pathReturn
		/* 
		var table = path.toArray();
		for (p : table){
			p.info();
		}*/
		currentRoad = path.firstSegment
		lastRoad = path.lastSegment
		//currentRoad.info()
		//lastRoad.info() 
		
	}

	on AgentSpawned {
		info("CarGPSAgent spawned ")
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
	on PerceptionEvent {
		//var s = getSkill(MovingVehicle);
		
		//s.moveVehicle()
	}
}
