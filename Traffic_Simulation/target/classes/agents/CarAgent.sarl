/** 
 * 
 */
package agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.DefaultContextInteractions
import agents.requestAStar
import agents.pathAStar
import framework.environment.PerceptionEvent

import motionalgo.SeekAlgorithm
import java.util.List
import framework.environment.Percept
import framework.^agent.MotionAlgorithmOutput
import framework.environment.Influence
import framework.environment.DynamicType
import framework.math.Vector2f
import framework.^agent.PhysicEnvironment
import motionalgo.SteeringSeekAlgorithm
import motionalgo.WanderAlgorithm
import framework.math.MathUtil
import motionalgo.SteeringWanderAlgorithm
import framework.^agent.StandardPhysicEnvironment
import java.util.UUID
import framework.math.Point2f

/** 
 * @author jerem
 * 
 */
agent CarAgent {
	uses Logging, DefaultContextInteractions, PhysicEnvironment
	
	var seekBehaviour : SeekAlgorithm 
	var wanderBehaviour : WanderAlgorithm
	var behaviorType : DynamicType
	
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("VehicleAgent was started.")
		behaviorType = DynamicType::STEERING
		occurrence.overridableInitializationStage
		this.seekBehaviour = new SteeringSeekAlgorithm
		this.wanderBehaviour = new SteeringWanderAlgorithm(60f, MathUtil.PI/4f,
			MathUtil.PI / 10f, MathUtil.PI / 10f, MathUtil.PI / 4f)
	
		emit( new requestAStar(ID));
	}

	def overridableInitializationStage(it : Initialize) : void {
		var physicSkill = new StandardPhysicEnvironment(it.parameters.get(0) as UUID, it.parameters.get(1) as UUID)
		setSkill(physicSkill, typeof(PhysicEnvironment))
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("VehicleAgent agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}
	
	on pathAStar{
		var path = occurrence.pathReturn;
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
	
	on PerceptionEvent {
		//var target = occurrence.perceptions.extractTarget
		//var target : Point2f = occurrence.
		var target : Point2f = null
		if (target !== null) {
			info("non null")
			// run the seek behaviour
			this.seekBehaviour.run(
				occurrence.body.position,
				occurrence.body.currentLinearSpeed,
				occurrence.body.maxLinearAcceleration,
				target
			).emitInfluence
		} else {
			// doNothing
			// // run the wander behaviour
			this.wanderBehaviour.run(
				occurrence.body.position,
				occurrence.body.direction,
				occurrence.body.currentLinearSpeed,
				occurrence.body.maxLinearAcceleration,
				occurrence.body.currentAngularSpeed,
				occurrence.body.maxAngularAcceleration
			).emitInfluence
}
		//for(o :occurrence.perceptions){
			/*if (o instanceof TrafficLight) {
				if((o as TrafficLight).state == TrafficLightColor.RED){
					//Décéléré la voiture
				}
			}
			if (o instanceof StopSign) {
			}
		}*/
	}

	def emitInfluence(output : MotionAlgorithmOutput, influences : Influence*) {
		if (output !== null) {
			if (output.getType() === DynamicType::STEERING)
				influenceSteering(output.linear, output.angular, influences)
			else
				influenceKinematic(output.linear, output.angular, influences);
		} else {
			influenceSteering(new Vector2f, 0f, influences)
		}
	}
		
}
