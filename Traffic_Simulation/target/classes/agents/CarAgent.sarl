/** 
 * 
 */
package agents

import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging

import io.sarl.core.DefaultContextInteractions
import agents.requestAStar
import agents.pathAStar
import framework.environment.PerceptionEvent

import framework.environment.Influence
import framework.environment.DynamicType
import framework.math.Vector2f

import framework.environment.InfluenceEvent
import java.util.ArrayList
import org.arakhne.afc.gis.road.primitive.RoadSegment
import framework.environment.MotionInfluence
import org.arakhne.afc.math.geometry.d2.d.Point2d
import java.lang.reflect.Array
import io.sarl.core.Lifecycle
import environments.TrafficLight
import environments.TrafficLightColor
import framework.environment.SituatedObject

/** 
 * Car Agent
 */
agent CarAgent {
	uses Logging, DefaultContextInteractions, Lifecycle

	/*
	 * Type of behavior to follow concerning the movement
	 */
	var behaviorType : DynamicType
	
	/*
	 * Path to the destination
	 */
	var path : ArrayList<RoadSegment>
	
	/*
	 * Direction in the segment
	 */
	var fromBeginToEnd = true
	
	/*
	 * Length covered in the segment
	 */
	var length : double
	
	/*
	 * Is the beginning of the travel
	 */
	var isBeginning = true
	
	/*
	 * Is the agent arrived at his destination
	 */
	var isArrived = false;
	
	
	on Initialize {
		//info("VehicleAgent was started.")
		behaviorType = DynamicType::STEERING
		
		//Ask for a path
		emit( new requestAStar(this.ID));
		length = 0
	}

	on Destroy {
		//info("VehicleAgent agent was stopped. " + this.ID)
		killMe()
	}
	
	/**
	 * Get path to his destination
	 */
	on pathAStar{
		path = occurrence.pathReturn;	
	}
	
	/**
	 * Handle the perception of his body
	 */
	on PerceptionEvent { 
		
		//for(o :occurrence.perceptions){
			/*if (o instanceof TrafficLight) {
				if((o as TrafficLight).state == TrafficLightColor.RED){
					//Décéléré la voiture
				}
			}
			if (o instanceof StopSign) {
			}
		 * }
			 */
		
		var currentPos = new Point2d(occurrence.body.position.x, occurrence.body.position.y);
		
		//Is the path is not filled yet or the agent has not been killed 
		if (path == null || path.empty) {
			if(!isBeginning){
				destionationReached();
			}
			emit(new InfluenceEvent());	
			return
		}
		
		//Get the current segment
		var segment = path.get(0)
		
		//Adapt the direction depending of his location
		if (isBeginning) {
			changeDirection(currentPos,segment);
			isBeginning = false;
		}

		var distanceMin : float = occurrence.perceptionDistance
		var object : SituatedObject
		var accelerationCar : double = occurrence.body.maxLinearAcceleration
		if (!occurrence.perceptions.isEmpty) {
			println(occurrence.perceptions.isEmpty)
			for (o : occurrence.perceptions) {
				var distance = Math.abs((occurrence.body.position - o.body.position).length)
				if (distance <= distanceMin) { // && path.get(0).contains(new Point2d(o.position.x, o.position.y))
					object = o.body;
					distanceMin = distance;
				}
			}
			
			
			if (object !== null) { 
				if (object.type == "LIGHT") {
					if ((object as TrafficLight).state == TrafficLightColor.RED) {
						var a = occurrence.body.maxLinearAcceleration
						var v = occurrence.body.currentLinearSpeed
						var vf = occurrence.body.maxLinearSpeed
						var adherence = 4
						var s = ((v / 10) * 6) + 10
						var b = (v ** 2) / (2 * distanceMin)
						var T = distanceMin / vf
						var deltaV = v
						accelerationCar = 1 - ((v / vf) ** adherence);
						var part1 = (s + v * T) / distanceMin
						var part2 = (v * deltaV) / (2 * distanceMin * (Math.sqrt(a*b)))
						accelerationCar -= (part1 + part2) ** 2
						accelerationCar = accelerationCar * a
					} else {
					}
				} else {
					if (object.type === "SIGN") {
						accelerationCar = 0;
					} else {
						if (object.type === "BODY") { // agent
						} else {
							accelerationCar = occurrence.body.maxLinearAcceleration
						}

					}
				}		
			}	
		}
			
		
		 
		
		if (fromBeginToEnd) {
			length = length + accelerationCar * 0.01f;
		}
		else {
			length = length - accelerationCar * 0.01;	
		}
		
		
		if(fromBeginToEnd && length >= segment.length){
			length = segment.length;
			path.remove(0)
			
			if (path.empty) {
				destionationReached();
				emit(new InfluenceEvent());	
				return
			}
			segment = path.get(0);
			
			changeDirection(currentPos,segment)
			
		}
		else if (!fromBeginToEnd && length <= 0) {
			length = 0;
			path.remove(0)
			
			if (path.empty) {
				destionationReached();
				emit(new InfluenceEvent());	
				return
			}
			segment = path.get(0);
			changeDirection(currentPos,segment)
		}
		
		var newPos = new Vector2f(segment.getGeoLocationForDistance(length).x, segment.getGeoLocationForDistance(length).y)
		var direction = new Vector2f((newPos.x - currentPos.x)*0.1f,(newPos.y - currentPos.y)*0.1f)
		//println(length + " - " + segment.length + " - "+ direction)

		var influences = Array::newInstance(typeof(Influence),1) as Influence[];
		influences.set(0, new MotionInfluence(DynamicType::KINEMATIC, this.ID , direction, 180f))
		var infEnv = new InfluenceEvent(influences)
		
		//infEnv.influences.add()
		
		emit(infEnv); 
	}
	
	/**
	 * Send a DestinationReached event if the agent has reached his destination
	 */
	private def destionationReached(){
		if(!isArrived){
			emit(new DestinationReached(this.ID));
			isArrived = true;
		}
	}
	
	/**
	 * Adapt the direction depending of his location
	 */
	private def changeDirection(currentPos : Point2d,segment : RoadSegment) {
		var distanceB = new Vector2f(segment.beginPoint.point.x - currentPos.x,	segment.beginPoint.point.y - currentPos.y)
		var distanceE = new Vector2f(segment.endPoint.point.x - currentPos.x, segment.endPoint.point.y - currentPos.y)
		var normeE = distanceE.length
		var normeB = distanceB.length
		if (normeB < normeE) {
			fromBeginToEnd = true;
			length = 0;
		} else {
			fromBeginToEnd = false;
			length = segment.length;
		}
	}

		
}
