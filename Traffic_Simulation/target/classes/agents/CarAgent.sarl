/** 
 * 
 */
package agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import environments.Vehicle
import io.sarl.core.DefaultContextInteractions
import agents.requestAStar
import agents.pathAStar
import framework.environment.PerceptionEvent
import environments.EnvironmentObject
import java.util.List
import java.util.ArrayList
import framework.environment.Percept
import environments.TrafficLight
import environments.StopSign
import environments.TrafficLightColor
import environments.Car
import org.arakhne.afc.math.geometry.d2.d.Point2d

/** 
 * @author jerem
 * 
 */
agent CarAgent {
	uses Logging, DefaultContextInteractions

	var car : Car;
	
	
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("VehicleAgent was started.")
		
		var position = car.getPosition();
		var position2d = new Point2d(position.x, position.y);
		emit( new requestAStar(position2d));
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("VehicleAgent agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}
	
	on pathAStar{
		
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
	
	on PerceptionEvent {
		/*for(o :occurrence.perceptions){
			if (o instanceof TrafficLight) {
				if((o as TrafficLight).state == TrafficLightColor.RED){
					//Décéléré la voiture
				}
			}
			if (o instanceof StopSign) {
			}
		}*/
	}
		
}
