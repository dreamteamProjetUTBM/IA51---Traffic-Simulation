import framework.FrameworkLauncher
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.List
import org.arakhne.afc.gis.maplayer.MapElementLayer
import environments.AgentEnvironment
import framework.gui.BehaviorTypeSelector
import javafx.stage.Stage
import framework.environment.SimulationAgentReady
import framework.environment.StartSimulation
import io.sarl.core.DefaultContextInteractions
import org.arakhne.afc.gis.road.primitive.RoadNetwork
import ui.ApplicationMap
import java.util.UUID
import io.sarl.util.OpenEventSpaceSpecification

/**
 * @description
 * Agent MainAgent.
 * 
 * This agent is used to setup and launch the application.
 */
agent MainAgent
{	
	uses Lifecycle;
	//uses Logging;
	uses DefaultContextInteractions
	
	//pour tester
	//var rd = new RoadNetwork();

	/*
	 * Size of the screen
	 */
	val WORLD_SIZE_X = 1280f;
	val WORLD_SIZE_Y = 640f;

	//var spaceId = UUID.randomUUID();
		
	on Initialize 
	{
		initializeSimulation(occurrence.parameters)
	}
	
	def initializeSimulation(parameters : List<Object>) : boolean 
	{
		(new Thread() {	def run()
			{
				ApplicationMap.launch(ApplicationMap); 
				
			}
		}).start();
		
		/** Spawn the environment that manage all others agents
		 */
		defaultContext.getOrCreateSpaceWithID(OpenEventSpaceSpecification, this.ID);

		spawn(typeof(AgentEnvironment),this.ID)
		
		return true;
	}

	on SimulationAgentReady [!occurrence.fromMe] {
		synchronized (this) {
			//waitingAgents--
			//if (waitingAgents <= 0) {
				emit(new StartSimulation)
				killMe
			//}
		}
	}
	
}
