/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package motionalgo

import static extension java.lang.Math.*
import framework.math.Vector2f
import framework.^agent.MotionAlgorithmOutput
import framework.environment.DynamicType
import framework.math.MathUtil

/**
 * Alignment Behaviour.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
interface AlignAlgorithm {

	/**
	 * @param orientation is the current orientation of the entity.
	 * @param angularSpeed is the current angular speed of the entity.
	 * @param maxAngular is the maximal angular speed or acceleration (depending on getType()) of the entity.
	 * @param target is the vector to match.
	 * @return the output.
	 */
	def run(orientation : Vector2f, angularSpeed : float, maxAngular : float, target : Vector2f) : MotionAlgorithmOutput
	
}

class KinematicAlignAlgorithm implements AlignAlgorithm {

	override run(orientation : Vector2f, angularSpeed : float, maxAngular : float,
		target : Vector2f) : MotionAlgorithmOutput {
		var output = new MotionAlgorithmOutput(DynamicType::KINEMATIC)
		var angle = orientation.signedAngle(target)
		output.angular = MathUtil::clamp(angle, -maxAngular, maxAngular)
		return output
	}

}

class SteeringAlignAlgorithm implements AlignAlgorithm {

	static val TIME_TO_REACH_DIRECTION = 2f
	
	val stopRadius : float 
	val decelerateRadius : float 

	/**
	 * @param stopRadius is the angle between the current direction and the target direction
	 * under which the rotation for alignment is ignored.
	 * @param decelerateRadius is the angle between the current direction and the target direction
	 * under which the rotation is going slower.
	 */
	new (stopRadius : float, decelerateRadius : float) {
		assert stopRadius < decelerateRadius
		this.stopRadius = stopRadius
		this.decelerateRadius = decelerateRadius
	}

	override run(orientation : Vector2f, angularSpeed : float, maxAngular : float,
		target : Vector2f) : MotionAlgorithmOutput {
		assert maxAngular >= 0.0f
		val rotation = orientation .. target
		val rotationSize = rotation.abs

		var acceleration = 0f

		if (rotationSize >= this.stopRadius) {
			val speed = angularSpeed.abs

			val directionToTarget = Math.signum(rotation);

			if (rotationSize > this.decelerateRadius || speed === 0f) {
				// Unit is: [r/s^2] = [r/s^2] * ID
				acceleration = maxAngular * directionToTarget
			} else {
				// Compute the acceleration - Units: [r/s] = ID * [r] / [s^2]
				acceleration = rotation / (TIME_TO_REACH_DIRECTION * TIME_TO_REACH_DIRECTION)
			}
		} else {
			acceleration = -angularSpeed / (TIME_TO_REACH_DIRECTION * TIME_TO_REACH_DIRECTION)
		}

		var output = new MotionAlgorithmOutput(DynamicType::STEERING)
		output.angular = MathUtil::clamp(acceleration, -maxAngular, maxAngular)
		return output
	}

}
