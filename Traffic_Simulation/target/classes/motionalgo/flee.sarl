/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package motionalgo

import framework.^agent.MotionAlgorithmOutput
import framework.environment.DynamicType
import framework.math.Point2f


/**
 * Flee Behavior.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
interface FleeAlgorithm {

	/**
	 * @param position is the current position of the entity.
	 * @param linearSpeed is the current linear speed of the entity.
	 * @param maxLinear is the maximal linear speed or acceleration (depending on getType()) of the entity.
	 * @param target is the point to flee.
	 * @return the behaviour output.
	 */
	def run(position : Point2f, linearSpeed : float, maxLinear : float, target : Point2f) : MotionAlgorithmOutput
	
}
/** 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
abstract class AbstractFleeAlgorithm implements FleeAlgorithm {

	abstract def getDynamicType : DynamicType

	override run(position : Point2f, linearSpeed : float, maxLinear : float, target : Point2f) : MotionAlgorithmOutput {
		var output = new MotionAlgorithmOutput(this.dynamicType)

		var direction = position - target
		direction.length = maxLinear

		output.linear = direction

		return output
	}

}

/** 
 * Kinematic Flee Behaviour.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class KinematicFleeAlgorithm extends AbstractFleeAlgorithm {

	override getDynamicType : DynamicType {
		DynamicType::KINEMATIC
	}
	
}
/** 
 * Steering Flee Behaviour.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class SteeringFleeAlgorithm extends AbstractFleeAlgorithm {

	override getDynamicType : DynamicType {
		DynamicType::STEERING
	}

}
