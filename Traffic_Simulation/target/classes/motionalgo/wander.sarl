/* 
 * $Id$
 * 
 * Copyright (c) 2011-15 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package motionalgo

import framework.math.Vector2f
import framework.^agent.MotionAlgorithmOutput
import framework.environment.DynamicType
import framework.math.Point2f
import java.util.Random

/**
 * Wander Behaviour.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
interface WanderAlgorithm {

	/**
	 * @param position is the current position of the entity.
	 * @param orientation is the current orientation of the entity.
	 * @param linearSpeed is the current linear speed of the entity.
	 * @param maxLinear is the maximal linear speed or acceleration (depending on getType()) of the entity.
	 * @param angularSpeed is the current angular speed of the entity.
	 * @param maxAngular is the maximal angular speed or acceleration (depending on getType()) of the entity.
	 * @return the behaviour output.
	 */
	def run(position : Point2f, orientation : Vector2f, linearSpeed : float, maxLinear : float,
		angularSpeed : float, maxAngular : float) : MotionAlgorithmOutput
	
}

/** 
 * Kinematic Wander Behaviour.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class KinematicWanderAlgorithm implements WanderAlgorithm {

	val random = new Random

	override run(position : Point2f, orientation : Vector2f, linearSpeed : float, maxLinear : float,
		angularSpeed : float, maxAngular : float) : MotionAlgorithmOutput {
		var output = new MotionAlgorithmOutput(DynamicType::KINEMATIC)

		var v = orientation.clone
		v.length = maxLinear
		output.linear = v

		var rotation = (this.random.nextGaussian * maxAngular) as float
		output.angular = rotation

		return output
	}
	
}
/** 
 * Steering Wander Behaviour.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class SteeringWanderAlgorithm implements WanderAlgorithm {

	val random = new Random
	val faceBehaviour : SteeringFaceAlgorithm
	val circleDistance : float
	val circleRadius : float
	val maxRotation : float

	var rotation : float
	/** 
	 * @param circleDistance is the distance between the entity and the circle center.
	 * @param circleRadius is the radius of the circle.
	 * @param maxRotation is the maximal rotation of the entity.
	 * @param stopRadius is the angle between the current direction and the target direction
	 * under which the rotation for alignment is ignored.
	 * @param decelerateRadius is the angle between the current direction and the target direction
	 * under which the rotation is going slower.
	 */
	new (circleDistance : float, circleRadius : float, maxRotation : float, stopRadius : float,
		decelerateRadius : float) {
		this.circleDistance = circleDistance
		this.circleRadius = circleRadius
		this.maxRotation = maxRotation
		this.rotation = 0f
		this.faceBehaviour = new SteeringFaceAlgorithm(stopRadius, decelerateRadius)
	}
	
	override run(position : Point2f, orientation : Vector2f, linearSpeed : float, maxLinear : float,
		angularSpeed : float, maxAngular : float) : MotionAlgorithmOutput {
		var circleCenter = orientation.toColinearVector(this.circleDistance)
		//
		// Calculate the displacement force
		var displacement = circleCenter.toColinearVector(this.circleRadius)
		displacement.turn(this.rotation)
		//
		// Change angle just a bit, so it
		// won't have the same value in the
		// next frame.
		// this.rotation += (Math.random() * 2f - 1f) * this.maxRotation;
		this.rotation += (this.random.nextGaussian * this.maxRotation) as float
		//
		// Finally calculate the wander force
		var wanderForce = circleCenter - displacement
		var target = position - wanderForce

		var output = this.faceBehaviour.run(position, orientation, angularSpeed, maxAngular, target)

		if (output === null || output.type !== DynamicType::STEERING) {
			output = new MotionAlgorithmOutput(DynamicType::STEERING)
		}

		var linearMotion = orientation.toColinearVector(maxLinear)
		output.linear = linearMotion

		return output
	}

}
